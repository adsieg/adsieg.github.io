###
buffer_links_bul4<-cbind(news_data$id,
as.data.frame(rep('news',NROW(news_data))))
colnames(buffer_links_bul4)<-c('label','group')
nodes <- rbind(as.data.frame(buffer_links_bul1),
as.data.frame(buffer_links_bul2),
as.data.frame(buffer_links_bul3),
as.data.frame(buffer_links_bul4))
View(nodes)
news_data <- news_data[c(1:30),]
final_edges<-NULL
# nodes
###
buffer_links_bul1<-cbind(news_data$publishedAt,
as.data.frame(rep('date_publication',NROW(news_data))))
for(i in 1:NROW(news_data)){ #NROW(news_data)
from <-rep(news_data[i,4],NCOL(news_data)-1)
to <-c(news_data[i,1],
news_data[i,2],
news_data[i,3])
label<-c('published_at','coming_from','falling_down')
buffer<-cbind(from,to,label) %>% as.data.frame()
final_edges<-rbind(final_edges,buffer)
}
colnames(buffer_links_bul1)<-c('label','group')
###
buffer_links_bul2<-cbind(news_data$source,
as.data.frame(rep('source',NROW(news_data))))
colnames(buffer_links_bul2)<-c('label','group')
###
buffer_links_bul3<-cbind(news_data$category,
as.data.frame(rep('category',NROW(news_data))))
colnames(buffer_links_bul3)<-c('label','group')
###
buffer_links_bul4<-cbind(news_data$id,
as.data.frame(rep('news',NROW(news_data))))
colnames(buffer_links_bul4)<-c('label','group')
nodes <- rbind(as.data.frame(buffer_links_bul1),
as.data.frame(buffer_links_bul2),
as.data.frame(buffer_links_bul3),
as.data.frame(buffer_links_bul4))
View(nodes)
final_nodes<-nodes[!duplicated(nodes$label), ]
final_nodes$id <- final_nodes$label
library(visNetwork)
visNetwork(final_nodes, final_edges, width = "100%")
visNetwork(final_nodes, final_edges)
saveRDS(final_nodes,"C:/Users/adsieg/Desktop/part_1/final_nodes_part_2.RDS")
saveRDS(final_edges,"C:/Users/adsieg/Desktop/part_1/final_edges_part_2.RDS")
final_nodes <- readRDS("C:/Users/adsieg/Desktop/part_1/final_nodes_part_2.RDS")
final_edges <- readRDS("C:/Users/adsieg/Desktop/part_1/final_edges_part_2.RDS")
library(tidytext)
```{r}
kable(news_data[c(1:30),]) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
library(data.table)
setwd("C:/Users/adsieg/Desktop/part_1")
news_data<-fread("news.csv", sep = ",", header= TRUE, encoding = 'UTF-8')
library(tidytext)
library(dplyr)
df_txt <- as.data.frame(news_data$description)
colnames(df_txt) <- c('text')
df_txt$text <-as.character(df_txt$text)
View(df_txt)
df_txt <- df_txt %>%
unnest_tokens(word, text)
data(stop_words)
df_txt <- df_txt %>%
anti_join(stop_words)
View(df_txt)
df_txt <-df_txt %>%
count(word, sort = TRUE)
View(df_txt)
df_txt <- as.data.frame(news_data$description)
colnames(df_txt) <- c('text')
df_txt$text <-as.character(df_txt$text)
df_txt <- df_txt %>%
unnest_tokens(word, text)
data(stop_words)
df_txt <- df_txt %>%
anti_join(stop_words)
library(janeaustenr)
library(dplyr)
library(stringr)
library(gutenbergr)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
tidy_bronte
View(tidy_bronte)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen"))
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_bronte %>%
count(word, sort = TRUE)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen"))
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books %>%
count(word, sort = TRUE)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen"))
View(frequency)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author)
View(frequency)
str(frequency)
frequency <- as.data.frame(frequency)
str(frequency)
frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
str(frequency)
View(frequency)
general_news <- news_data %>%
filter(category == "general") %>%
select(description)
general_news <- general_news %>%
anti_join(stop_words)
general_news <- news_data %>%
filter(category == "general") %>%
select(description)
View(general_news)
text_df <- as.data.frame(general_news)
colnames(text_df)<-c('text')
text_df %>%
unnest_tokens(word, text)
general_news <- general_news %>%
anti_join(stop_words)
general_news <- text_df %>%
anti_join(stop_words)
text_df <- text_df %>%
unnest_tokens(word, text)
general_news <- text_df %>%
anti_join(stop_words)
general_news <- general_news %>%
count(word, sort = TRUE)
View(general_news)
View(general_news)
general_news$author <- c('General news')
View(general_news)
# ---
general_news <- news_data %>%
filter(category == "general") %>%
select(description)
text_df <- as.data.frame(general_news)
colnames(text_df)<-c('text')
text_df <- text_df %>%
unnest_tokens(word, text)
general_news <- text_df %>%
anti_join(stop_words)
general_news <- general_news %>%
count(word, sort = TRUE)
general_news$author <- c('General news')
sport_news <- news_data %>%
filter(category == "sport") %>%
select(description)
text_df <- as.data.frame(sport_news)
colnames(text_df)<-c('text')
text_df <- text_df %>%
unnest_tokens(word, text)
sport_news <- text_df %>%
anti_join(stop_words)
sport_news <- sport_news %>%
count(word, sort = TRUE)
sport_news$author <- c('sport news')
# ---
business_news <- news_data %>%
filter(category == "business") %>%
select(description)
text_df <- as.data.frame(business_news)
colnames(text_df)<-c('text')
text_df <- text_df %>%
unnest_tokens(word, text)
business_news <- text_df %>%
anti_join(stop_words)
business_news <- business_news %>%
count(word, sort = TRUE)
business_news$author <- c('business news')
frequency <- rbind(general_news,
business_news,
sport_news)
str(frequency)
View(frequency)
frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `General news`:`sport news`)
frequency <-frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `General news`:`sport news`)
View(frequency)
library(scales)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL)
library(scales)
library(ggplot2)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw()
frequency <- rbind(business_news,
general_news,
sport_news)
frequency <-frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `business news`:`sport news`)
View(frequency)
library(scales)
library(ggplot2)
frequency <- rbind(general_news,
business_news,
sport_news)
frequency <-frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `General news`:`sport news`)
View(frequency)
library(scales)
library(ggplot2)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw()
saveRDS(frequency,"C:/Users/adsieg/Desktop/part_1/frequency.RDS")
library(scales)
library(ggplot2)
readRDS("C:/Users/adsieg/Desktop/part_1/frequency.RDS")
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw() +
theme(legend.position="none")
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw() +
theme(legend.position="none")
cor.test(data = frequency[frequency$author == 'General news',],
~ proportion + 'business news')
cor.test(data = frequency[frequency$author == 'General news',],
~ proportion + 'business news')
frequency[frequency$author == 'General news',]
cor.test(data = frequency[frequency$author == 'General news',],
~ proportion + 'business news')
data = frequency[frequency$author == 'General news',]
data
cor.test(data = frequency[frequency$author == 'General news',], ~ proportion)
cor.test(data = frequency[frequency$author == 'General news',] ~ proportion)
cor.test(data = frequency[frequency$author == "Brontë Sisters",],
~ proportion + `Jane Austen`)
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books %>%
count(word, sort = TRUE)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author)
frequency <-frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `General news`:`sport news`)
library(scales)
library(ggplot2)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw()
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
library(tidytext)
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books %>%
count(word, sort = TRUE)
library(gutenbergr)
hgwells <- gutenberg_download(c(35, 36, 5230, 159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE)
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))
tidy_bronte <- bronte %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
library(tidyr)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author)
frequency <-frequency %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `General news`:`sport news`)
library(scales)
frequency <- bind_rows(mutate(tidy_bronte, author = "Brontë Sisters"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_books, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(author, proportion) %>%
gather(author, proportion, `Brontë Sisters`:`H.G. Wells`)
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `Jane Austen`, color = abs(`Jane Austen` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "Jane Austen", x = NULL)
cor.test(data = frequency[frequency$author == "Brontë Sisters",],
~ proportion + `Jane Austen`)
frequency <- readRDS("C:/Users/adsieg/Desktop/part_1/frequency.RDS")
# expect a warning about rows with missing values being removed
ggplot(frequency, aes(x = proportion, y = `business news`, color = abs(`business news` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~author, ncol = 2) +
theme(legend.position="none") +
labs(y = "business news", x = NULL) +
theme_bw() +
theme(legend.position="none")
frequency <- readRDS("C:/Users/adsieg/Desktop/part_1/frequency.RDS")
levels(author)
levels(frequency$author)
frequency$author
cor.test(data = frequency[frequency$author == "General news",],
~ proportion + `business news`)
